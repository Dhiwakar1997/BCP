private int LotAndSerialParser(string barcodeString, string pattern)
        {
            _auditLogService.Info("LotAndSerialParser function started");
            Match ptnMatch = Regex.Match(barcodeString, pattern);
 
            if (ptnMatch.Success)
            {
                if (ptnMatch.Groups["lot"].Success)
                {
                    ParsedData.LotNumber = ptnMatch.Groups["lot"].Value;
                }
                else if (ptnMatch.Groups["SN"].Success)
                {
                    ParsedData.SerialNumber = ptnMatch.Groups["SN"].Value;
                }
 
                if (ptnMatch.Groups["YYJJJ"].Success)
                {
                    int DayOfTheYear = Convert.ToInt32(ptnMatch.Groups["jjj"].Value) - 1;
                    DateTime parsedDate = DateTime.ParseExact(ptnMatch.Groups["yy"].Value, "yy", null).AddDays(DayOfTheYear);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if (ptnMatch.Groups["YYJJJHH"].Success)
                {
                    int DayOfTheYear = Convert.ToInt32(ptnMatch.Groups["jjj"].Value) - 1;
                    DateTime datetime = DateTime.ParseExact(ptnMatch.Groups["yy"].Value + ptnMatch.Groups["hh"].Value, "yyHH", null);
                    DateTime parsedDate = datetime.AddDays(DayOfTheYear);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if (ptnMatch.Groups["MMYY"].Success)
                {
                    DateTime parsedDate = DateTime.ParseExact(ptnMatch.Groups["MMYY"].Value, "MMyy", null);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if (ptnMatch.Groups["MMDDYY"].Success)
                {
                    DateTime parsedDate =  DateTime.ParseExact(ptnMatch.Groups["MMDDYY"].Value, "MMddyy", null);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if (ptnMatch.Groups["YYMMDD"].Success)
                {
                    DateTime parsedDate = DateTime.ParseExact(ptnMatch.Groups["YYMMDD"].Value, "yyMMdd", null);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if (ptnMatch.Groups["YYMMDDHH"].Success)
                {
                    DateTime parsedDate = DateTime.ParseExact(ptnMatch.Groups["YYMMDDHH"].Value, "yyMMddHH", null);
                    ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                    ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                else if(ptnMatch.Groups["JJJ"].Success)
                {
                    int DayOfTheYear = Convert.ToInt32(ptnMatch.Groups["JJJ"].Value) - 1;
                    //ParsedData.ExpDate = DateTime.ParseExact(ptnMatch.Groups["YYJJJ"].Value, "yyJJJ", null).AddDays(DayOfTheYear);
                    //ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                }
                _auditLogService.Info("LotAndSerialParser function finished | Pattern matched");
                return 1;
            }
            _auditLogService.Info("LotAndSerialParser function finished | Pattern unmatched");
            return 0;
        }
private bool HIBC_primary_parser(string barcodeString)
        {
            _auditLogService.Info("HIBC_primary_parser function started");
            string ItemNumberPattern = "\\+[A-Za-z][A-Za-z0-9]{3}([A-Za-z0-9]{1,18})..";
            Match itemNumberMatch = Regex.Match(barcodeString, ItemNumberPattern);
            if (itemNumberMatch.Success)
            {
                ParsedData.ItemNumber = itemNumberMatch.Groups[1].Value;
            }
            _auditLogService.Info("HIBC_primary_parser function finished");
 
            return itemNumberMatch.Success;
        }

private bool HIBC_secondary_parser(string barcodeString)
        {
            _auditLogService.Info("HIBC_secondary_parser function started");
            int parsed = 0;
 
            //SERIAL NUMBER
            string serialPattern = "(\\+\\$\\$\\+(?'MMYY'(0[0-9]|1[0-2])[0-9]{2})(?'SN'.{0,13})..|\\+\\$\\$\\+2(?'MMDDYY'(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])[0-9]{2})(?'SN'.{0,13})..|\\+\\$\\$\\+3(?'YYMMDD'([0-9]{2})(0[0-9]|1[0-2])([0-2][0-9]|3[0-1]))(?'SN'.{0,13})..|\\+\\$\\$\\+4(?'YYMMDDHH'([0-9]{2})(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])([0-1][0-9]|2[0-4]))(?'SN'.{0,13})..|\\+\\$\\$\\+5(?'YYJJJ'(?'yy'[0-9]{2})(?'jjj'[0-2][0-9][0-9]|3[0-6][0-9]))(?'SN'.{0,13})..|\\+\\$\\$\\+6(?'YYJJJHH'(?'yy'[0-9]{2})(?'jjj'[0-2][0-9][0-9]|3[0-6][0-9])(?'hh'[0-1][0-9]|2[0-4]))(?'SN'.{0,13})..|\\+\\$\\$\\+8(?'JJJ'[0-2][0-9][0-9]|3[0-6][0-9]|[0-9][0-9])(?'SN'.{0,13})..|\\+\\$\\$\\+9([0-9]{6})(?'SN'.{0,13})..|(\\+\\$\\$\\+7|\\+\\$\\+)(?'SN'.{0,13})..)";
            parsed = LotAndSerialParser(barcodeString, serialPattern);
            if (parsed == 1)
            {
                ParsedData.LotSerialFlag = "S";
                _auditLogService.Info("HIBC_secondary_parser function finished");
                return true;
            }
 
            //LOT NUMBER 
            string lotPattern = "(\\+\\$\\$(?'MMYY'(0[0-9]|1[0-2])[0-9]{2})(?'lot'.{0,13})..|\\+\\$\\$2(?'MMDDYY'(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])[0-9]{2})(?'lot'.{0,13})..|\\+\\$\\$3(?'YYMMDD'([0-9]{2})(0[0-9]|1[0-2])([0-2][0-9]|3[0-1]))(?'lot'.{0,13})..|\\+\\$\\$4(?'YYMMDDHH'([0-9]{2})(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])([0-1][0-9]|2[0-4]))(?'lot'.{0,13})..|\\+\\$\\$5(?'YYJJJ'(?'yy'[0-9]{2})(?'jjj'[0-2][0-9][0-9]|3[0-6][0-9]))(?'lot'.{0,13})..|\\+\\$\\$6(?'YYJJJHH'(?'yy'[0-9]{2})(?'jjj'[0-2][0-9][0-9]|3[0-6][0-9])(?'hh'[0-1][0-9]|2[0-4]))(?'lot'.{0,13})..|\\+\\$\\$8(?'JJJ'[0-2][0-9][0-9]|3[0-6][0-9]|[0-9][0-9])(?'lot'.{0,13})..|\\+\\$\\$9([0-9]{6})(?'lot'.{0,13})..|(\\+\\$\\$7|\\+\\$)(?'lot'.{0,13})..)";
            parsed = LotAndSerialParser(barcodeString, lotPattern);
            if (parsed == 1)
            {
                ParsedData.LotSerialFlag = "L";
                _auditLogService.Info("HIBC_secondary_parser function finished");
                return true ;
            }
 
            //EXPIRATION DATE alone
            string expDatePattern = "\\+(?'YYJJJ'([0-9]{2})([0-2][0-9][0-9]|3[0-6][0-9]))..";
 
            Match expDateMatch = Regex.Match(barcodeString, expDatePattern);
            if (expDateMatch.Success)
            {
                int DayOfTheYear = Convert.ToInt32(expDateMatch.Groups[2].Value) - 1;
                DateTime parsedDate  = DateTime.ParseExact(expDateMatch.Groups[1].Value, "yy", null).AddDays(DayOfTheYear);
                ParsedData.ExpDate = Utils.ConvertYearTo21stCentury(parsedDate);
                ParsedData.ExpDateStr = ParsedData.ExpDate.ToString("yyyy-MM-dd");
                _auditLogService.Info("HIBC_secondary_parser function finished");
                return true;
            }
            _auditLogService.Info("HIBC_secondary_parser function finished");
            return false;
        }
